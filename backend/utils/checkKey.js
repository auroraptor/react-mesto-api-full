const jwt = require('jsonwebtoken');

// eslint-disable-next-line global-require
// const jwt = require('jsonwebtoken');
const YOUR_JWT = ''; // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ JWT, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω—É–ª –ø—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
const SECRET_KEY_DEV = 'üîê'; // –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –∫–æ–¥–∞
try {
  // eslint-disable-next-line no-unused-vars
  const payload = jwt.verify(YOUR_JWT, SECRET_KEY_DEV);
  // eslint-disable-next-line no-console
  console.log('\x1b[31m%s\x1b[0m', `
    –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ—Ç –∂–µ
    —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á, —á—Ç–æ –∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
  `);
} catch (err) {
  if (err.name === 'JsonWebTokenError' && err.message === 'invalid signature') {
    // eslint-disable-next-line no-console
    console.log(
      '\x1b[32m%s\x1b[0m',
      '–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ. –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è',
    );
  } else {
    // eslint-disable-next-line no-console
    console.log(
      '\x1b[33m%s\x1b[0m',
      '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫',
      err,

    );
  }
}
